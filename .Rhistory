plot(cars)
plot(cars)
# SCRIPT PARA QUE GITHUB PILLE TODO EN SU SITIO
# Renderiza el proyecto Quarto
quarto::quarto_render()
# Define los directorios
output_dir <- "_site"
main_dir <- "."
# Mueve todos los archivos y carpetas de `_site` a la raíz del repositorio
file.copy(list.files(output_dir, full.names = TRUE, recursive = TRUE),
main_dir,
recursive = TRUE,
overwrite = TRUE)
# Limpia la carpeta `_site`
unlink(output_dir, recursive = TRUE)
install.packaches(c("knitr", "rmarkdown", "quarto", "quanteda"))
install.packages(c("knitr", "rmarkdown", "quarto", "quanteda"))
library(quanteda)
diary_v_toks <-tokens(diary_v)
install.packages("readtext")
library(readtext)
?readtext
library(quanteda)
data_char_navalny <- as.character(readtext("NAVALNY.txt"))
data_char_navalny <- as.character(readtext::readtext("NAVALNY.txt"))
data_char_navalny <- as.character(readtext("../NAVALNY.txt"))
data_char_NALVANY <- as.character(readtext::readtext("NAVALNY.txt"))
names(data_char_NALVANY) <- "NALVANY"
data_char_navalny <- as.character(readtext("NAVALNY.txt"))
names(data_char_navalny) <- "navalny"
rm(data_char_NALVANY)
View(data_char_navalny)
library.("stringi") #Primero llamamos al paquete
library("stringi") #Primero llamamos al paquete
stri_sub(data_char_navalny, 1, 75) #Aplicamos la función para que nos devuelva los caracteres situados entre la posición 1 y 75.
install.packages(c("quanteda", "readtext", "dplyr", "stringr"))
library(quanteda)
library(readtext)
library(dplyr)
install.packages("dplyr")
library(quanteda)
library(readtext)
library(dplyr)
library(stringr)
navalny_raw <- as.character(readtext("NAVALNY.txt"))
names(navalny_raw) <- "navalny"
rm(data_char_navalny)
library("stringi") #Primero llamamos al paquete
stri_sub(data_char_navalny, 1, 75) #Aplicamos la función para que nos devuelva los caracteres situados entre la posición 1 y 75.
# Comprobar los primeros 75 caracteres del texto
stri_sub(navalny_raw$navalny, 1, 75)
# Comprobar los primeros 75 caracteres del texto
stri_sub(navalny_raw, 1, 75)
(start_v <- stri_locate_first_fixed(data_char_NALVANY, "2023\nJanuary 12th")[1])
(start_v <- stri_locate_first_fixed(navalny_raw, "2023\nJanuary 12th")[1])
(end_v <- stri_locate_last_fixed(navalny_raw, "Alexei Navalny died")[1])
navalny_fix <- stri_sub(navalny_raw, start_v, end_v)
length(navalny_fix)
View(navalny_fix)
navalny_fix[1]
View(head(navalny_fix[1]))
View(navalny_fix[1])
head([navalny_fix[1]])
head(navalny_fix[1])
# Convertir el texto en un vector de líneas
lines <- unlist(strsplit(navalny_fix$text, "\n"))
# Convertir el texto en un vector de líneas
lines <- unlist(strsplit(navalny_fix, "\n"))
# Convertir el texto en un vector de líneas
lines <- unlist(strsplit(navalny_fix, "\n"))
# Mostrar las primeras 20 líneas del texto en formato raw
cat(lines[1:20], sep = "\n")
# Convertir el texto en un vector de líneas
lines <- unlist(strsplit(navalny_fix, "\n"))
# Mostrar las primeras 20 líneas del texto en formato raw
cat(lines[1:15], sep = "\n")
# Convertir el texto en un vector de líneas
lines <- unlist(strsplit(navalny_fix, '\n')) # \n indica un salto de línea
lines
head(lines) # vamos a mirar las primeras seis líneas de nuestro objeto
navalny_fix <- stri_sub(navalny_raw, start_v, end_v)
length(navalny_fix)
# Convertir el texto en un vector de líneas
lines <- unlist(strsplit(navalny_fix, "\n"))
# Mostrar las primeras 20 líneas del texto en formato raw
cat(lines[1:15], sep = "\n")
# Convertir el texto en un vector de líneas
lines <- unlist(strsplit(navalny_fix, '\n')) # \n indica un salto de línea
head(lines) # Veamos las primeras seis líneas de nuestro objeto
(start_v <- stri_locate_first_fixed(navalny_raw, "2023\nJanuary 12th")[1])
library(stringi)
# Detectar índices de fechas usando el patrón de año seguido de mes
fecha_indices <- grep("^\\d{4}\\s+(January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d{1,2}(st|nd|rd|th)?$", lines)
fecha_indices
# Detectar índices de fechas usando una expresión regular más flexible
fecha_indices <- grep("^\\d{4}\\s+(January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d{1,2}(st|nd|rd|th)?$", lines)
print(fecha_indices)
# Detectar índices de fechas buscando las líneas con el año
fecha_indices <- grep("^\\d{4}$", lines)
# Agrupa las líneas que hay entre años
entries <- lapply(seq_along(fecha_indices), function(i) {
start <- fecha_indices[i]
end <- if (i < length(fecha_indices)) fecha_indices[i + 1] - 1 else length(lines)
lines[start:end]
})
# Aquí vemos la primera entrada del diario
print(entries[[1]])
# Identificar las líneas que contienen el año
year_indices <- grep("^\\d{4}$", lines)
print(year_indices)
month_day_indices <- grep("^(January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d{1,2}(st|nd|rd|th)?$", lines)
length(month_day_indices) # Número de entradas identificadas
# Dividimos el texto en entradas anidadas (por año y día)
yearly_entries <- lapply(seq_along(year_indices), function(i) {
start_year <- year_indices[i]
end_year <- if (i < length(year_indices))
year_indices[i + 1] - 1
else
length(lines)
# Extraer las líneas correspondientes al año actual
year_lines <- lines[start_year:end_year]
# Encontrar las entradas diarias dentro del año actual
day_indices <- grep("^(January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d{1,2}(st|nd|rd|th)?$", year_lines)
# Crear una sublista para cada día dentro del año
entries <- lapply(seq_along(day_indices), function(j) {
start_day <- day_indices[j]
end_day <- if (j < length(day_indices)) day_indices[j + 1] - 1 else length(year_lines)
year_lines[start_day:end_day]
})
# Devolver una lista con el año y sus entradas diarias
list(year = year_lines[1], entries = entries)
})
View(yearly_entries)
# Verificar el año y su primera entrada
print(yearly_entries[[1]]$year)
# Verificar el año y su primera entrada
print(yearly_entries[[2]]$year)
print(length(yearly_entries[[1]$entries]))
print(length(yearly_entries[[1]]$entries))
print(yearly_entries$year)
print(yearly_entries[1:2]$year)
print(yearly_entries1[1]$year)
print(yearly_entries1[[1]]$year)
print(yearly_entries[[1]]$year)
print(yearly_entries$year)
print(yearly_entries[1:2]$year)
print(yearly_entries[1]$year)
print(yearly_entries[[1]]$year) # primer año
print(length(yearly_entries[[1]]$entries)) # Número de entradas en 2023
print(length(yearly_entries[[4]]$entries)) # Número de entradas en 2024
print(length(yearly_entries[[1]]$entries)) # Número de entradas en 2023
print(length(yearly_entries[[2]]$entries)) # Número de entradas en 2024
day_indices <- grep("^(January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d{1,2}(st|nd|rd|th)?$", lines)
length(day_indices) # Número de entradas identificadas
print(length(yearly_entries[[1]]$entries)) # Número de entradas en 2023
print(length(yearly_entries[[2]]$entries)) # Número de entradas en 2024
count(yearly_entries[[1]]$entries)
install.packages(c("quanteda", "readtext", "dplyr", "stringi"))
length(yearly_entries[[1]]$entries)
View(yearly_entries)
